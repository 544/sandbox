// Generated by CoffeeScript 1.8.0
(function() {
  var BOARD_SIZE, CELL_SIZE, LENGTH, append, br, button, cells, create, draw, i, initialize, input, isStart, text, _i, _ref;

  create = function(type) {
    return document.createElement(type);
  };

  append = function(child) {
    return document.body.appendChild(child);
  };

  br = function() {
    return append(create("br"));
  };

  text = function(type, text) {
    var elm;
    elm = create(type);
    elm.innerHTML = text;
    return append(elm);
  };

  input = function(type, value) {
    var elm;
    elm = create("input");
    elm.type = type;
    elm.value = value;
    return elm;
  };

  button = function(value, fn) {
    var elm;
    elm = input("button", value);
    elm.onClick = fn;
    return append(elm);
  };

  CELL_SIZE = 5;

  BOARD_SIZE = 350;

  LENGTH = BOARD_SIZE / CELL_SIZE;

  isStart = false;

  cells = new Array(Math.pow(LENGTH, 2));

  for (i = _i = 0, _ref = cells.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
    cells[i] = {
      "now": 0,
      "next": 0
    };
  }

  draw = function(canvas, context) {
    var j, x, y, _j, _k, _results;
    context.fillStyle = "#eeeeee";
    context.fillRect(0, 0, canvas.width, canvas.height);
    context.fill();
    context.fillStyle = "#000000";
    context.strokeStyle = "#000000";
    context.lineWidth = 1;
    x = canvas.width / CELL_SIZE;
    y = canvas.height / CELL_SIZE;
    for (i = _j = 0; 0 <= x ? _j <= x : _j >= x; i = 0 <= x ? ++_j : --_j) {
      context.beginPath();
      context.moveTo(i * CELL_SIZE, 0);
      context.lineTo(i * CELL_SIZE, canvas.height);
      context.stroke();
    }
    _results = [];
    for (j = _k = 0; 0 <= y ? _k <= y : _k >= y; j = 0 <= y ? ++_k : --_k) {
      context.beginPath();
      context.moveTo(0, j * CELL_SIZE);
      context.lineTo(canvas.width, j * CELL_SIZE);
      _results.push(context.fillRect(x * CELL_SIZE, y * CELL_SIZE, CELL_SIZE, CELL_SIZE));
    }
    return _results;
  };

  initialize = function() {
    var add, calc, canvas, context, speed, start;
    canvas = document.createElement("canvas");
    canvas.width = BOARD_SIZE;
    canvas.height = BOARD_SIZE;
    context = canvas.getContext("2d");
    canvas.onmousedown = function(e) {
      var x, y;
      x = Math.floor(e.offsetX / CELL_SIZE);
      y = Math.floor(e.offsetY / CELL_SIZE);
      if (cells[x + (y * LENGTH)].now === 0) {
        cells[x + (y * LENGTH)].now = 1;
      } else {
        cells[x + (y * LENGTH)].now = 0;
      }
      return draw(canvas, context);
    };
    append(canvas);
    draw(canvas, context);
    br();
    text("span", "speed");
    speed = input("text", "10");
    speed.size = 10;
    append(speed);
    br();
    button("start", function() {
      if (!isStart) {
        isStart = true;
        return start(speed.value);
      }
    });
    button("stop", function() {
      return isStart = false;
    });
    button("one step", function() {
      if (!isStart) {
        return start(speed.value);
      }
    });
    button("reset", function() {
      var _j, _ref1;
      for (i = _j = 0, _ref1 = cells.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        cells[i] = {
          "now": 0,
          "next": 0
        };
      }
      return draw(canvas, context);
    });
    button("randam", function() {
      var _j, _ref1;
      for (i = _j = 0, _ref1 = cells.length - 1; 0 <= _ref1 ? _j <= _ref1 : _j >= _ref1; i = 0 <= _ref1 ? ++_j : --_j) {
        if (Math.floor(Math.randam() * 10) + 1 > 3) {
          cells[i].now = 0;
        } else {
          cells[i].now = 1;
        }
      }
      return draw(canvas, content);
    });
    start = function(speed) {
      calc();
      draw(canvas, content);
      if (isStart) {
        return setTimeout(function() {
          return start(speed);
        }, 1000 / speed);
      }
    };
    calc = function() {
      var c, count, _j, _k, _len, _len1, _results;
      for (i = _j = 0, _len = cells.length; _j < _len; i = ++_j) {
        c = cells[i];
        count = add(i - 1);
        count += add(i + 1);
        count += add(i - 1 - LENGTH);
        count += add(i + 1 - LENGTH);
        count += add(i - 1 + LENGTH);
        count += add(i + 1 + LENGTH);
        count += add(i + LENGTH);
        switch (count) {
          case 0:
          case 1:
          case 4:
          case 5:
          case 6:
          case 7:
          case 8:
            c.next = 0;
            break;
          case 3:
            c.next = 1;
            break;
          case 2:
            c.next = c.now;
        }
      }
      _results = [];
      for (_k = 0, _len1 = cells.length; _k < _len1; _k++) {
        c = cells[_k];
        _results.push(c.now = c.next);
      }
      return _results;
    };
    return add = function(index) {
      if (index >= 0 && index < cells.length) {
        return cells[index].now;
      } else {
        return 0;
      }
    };
  };

  window.onload = function() {
    return initialize();
  };

}).call(this);
